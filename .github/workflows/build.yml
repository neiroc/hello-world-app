name: CI Pipeline

on:
  push:
    branches: 
      - "**"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'

      - name: Run tests
        run: go test ./...

      - name: Run static analysis
        run: go vet ./...

      # - name: Run Semantic Release
      #   id: semantic_release
      #   run: npx semantic-release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # TODO. use semver !!!!!
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=branch

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      # Setup Kubeconfig for Kubernetes access
      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          kubectl config use-context k3s-ansible 
        env:
          KUBECONFIG: ~/.kube/config

      # Install or upgrade Helm release in Kubernetes
      - name: Install or Upgrade Helm release
        run: |
          helm upgrade --install hello-world-app helm/hello-world-app --kubeconfig ~/.kube/config

      # # Install Ansible and run the playbook
      # - name: Install Ansible
      #   run: |
      #     sudo apt update
      #     sudo apt install -y ansible
      #      # Configure SSH and Run Ansible playbook

      # - name: Configure SSH
      #   run: |
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > cubbit.key
      #     chmod 600 cubbit.key

      # - name: Run Ansible playbook to deploy Helm chart
      #   env:
      #     ANSIBLE_HOST_KEY_CHECKING: 'False'  # Optional: skips host key checking for SSH
      #   run: |
      #     ansible-galaxy install -r ansible/requirements.yml 
      #     ansible-playbook -i ansible/inventory.yml ansible/playbooks/deploy-app.yml