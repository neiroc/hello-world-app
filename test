apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkekNDQVIyZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWpNU0V3SHdZRFZRUUREQmhyTTNNdGMyVnkKZG1WeUxXTmhRREUzTWprNE5EVTJPVGt3SGhjTk1qUXhNREkxTURnME1UTTVXaGNOTXpReE1ESXpNRGcwTVRNNQpXakFqTVNFd0h3WURWUVFEREJock0zTXRjMlZ5ZG1WeUxXTmhRREUzTWprNE5EVTJPVGt3V1RBVEJnY3Foa2pPClBRSUJCZ2dxaGtqT1BRTUJCd05DQUFRc0tndkpTaGRGYWQyMGE0dUJoMUlKbGRYdUlncHY3c0JPVEllYk16TTQKM2Z4UWxaRFV4RXNzNWR0Q1A2ZEx6QjBUUXFrSmhJdFpxSVpLK3hqOVp6NVhvMEl3UURBT0JnTlZIUThCQWY4RQpCQU1DQXFRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVU8wazIwSXJTam9zRG5SNzBjRjdPCnFkTWQ2Z0F3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUlnRm9CdVcrblY0dEdvMTB3TnFmZmVOQm9KQTlBM2g4VU0KNlpzdHVTNFpkQzhDSVFDTG9HTWtXM2hvOEFMbjUrd1g5c2s3TUNLeWpnWlA0S3pnbGNobFJ3eC9rZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    server: https://34.154.135.189:6443
  name: k3s-ansible
contexts:
- context:
    cluster: k3s-ansible
    user: k3s-ansible
  name: k3s-ansible
kind: Config
preferences: {}
users:
- name: k3s-ansible
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJrVENDQVRlZ0F3SUJBZ0lJWkxnMHk4YnlKY293Q2dZSUtvWkl6ajBFQXdJd0l6RWhNQjhHQTFVRUF3d1kKYXpOekxXTnNhV1Z1ZEMxallVQXhOekk1T0RRMU5qazVNQjRYRFRJME1UQXlOVEE0TkRFek9Wb1hEVEkxTVRBeQpOVEE0TkRFek9Wb3dNREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhGVEFUQmdOVkJBTVRESE41CmMzUmxiVHBoWkcxcGJqQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJEb3N2Tm11eWh6VnVJeUQKZWhXdGdwK2JpK3ZRWUUxOTVUL0xLdEZOaENOcW1EbzhTY0RRZFdVQlg2ZHhHVFplcFRaUUhxdDRqU0kvaFUwNwpaaEkzWjV1alNEQkdNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBakFmCkJnTlZIU01FR0RBV2dCU2dnYzJaVVRZam1jY1FFTmZaQ2dJZXNRUXc5REFLQmdncWhrak9QUVFEQWdOSUFEQkYKQWlBYUc3elpYSWp6NzllWk12ZWFhNHI3TnIrbmtPREEveUhaa3F1R1ZJUTRVZ0loQU9IWFREcEpnZGVCSHVKTApzZ2RpY1luZFJFSFJUYzFPaFg2UHhpTjJ2RTBNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJlRENDQVIyZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWpNU0V3SHdZRFZRUUREQmhyTTNNdFkyeHAKWlc1MExXTmhRREUzTWprNE5EVTJPVGt3SGhjTk1qUXhNREkxTURnME1UTTVXaGNOTXpReE1ESXpNRGcwTVRNNQpXakFqTVNFd0h3WURWUVFEREJock0zTXRZMnhwWlc1MExXTmhRREUzTWprNE5EVTJPVGt3V1RBVEJnY3Foa2pPClBRSUJCZ2dxaGtqT1BRTUJCd05DQUFTdFZhb0tsd2thM09qQSt5bHJ3ajZJZE9zeTI1MkxRZXoyUG9jWUtsU2EKYXJNczIvNUdzU1VkV3lON2hPRUJTQktCWGQzUzMzNHgxTmFGam1adkFNSjVvMEl3UURBT0JnTlZIUThCQWY4RQpCQU1DQXFRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVW9JSE5tVkUySTVuSEVCRFgyUW9DCkhyRUVNUFF3Q2dZSUtvWkl6ajBFQXdJRFNRQXdSZ0loQUpkRGNnck95SVExa2dWSHl6bHNhWGxiQ2lIVVF6QUgKVUNKV3J1QnBoWmQ5QWlFQThraENWTFFNTHk5dnVlU0xRaHhXMHVBQXBlbWE4bitHcW9HVjNSNXpTYkU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    client-key-data: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUNpWEQ2bFpSRVFWaE84QkFHYTVsaWd4aTZBcityZVU2K3MxczU4Skt6SG5vQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFT2l5ODJhN0tITlc0aklONkZhMkNuNXVMNjlCZ1RYM2xQOHNxMFUyRUkycVlPanhKd05CMQpaUUZmcDNFWk5sNmxObEFlcTNpTklqK0ZUVHRtRWpkbm13PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
